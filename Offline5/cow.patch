diff --git a/Makefile b/Makefile
index 39a99d7..a5c5b48 100644
--- a/Makefile
+++ b/Makefile
@@ -117,6 +117,7 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 
 UPROGS=\
 	$U/_cat\
+	$U/_cow1\
 	$U/_echo\
 	$U/_forktest\
 	$U/_grep\
diff --git a/first.patch b/first.patch
new file mode 100644
index 0000000..50e085f
--- /dev/null
+++ b/first.patch
@@ -0,0 +1,961 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..439f9f2 100644
+--- a/Makefile
++++ b/Makefile
+@@ -117,6 +117,8 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
+ 
+ UPROGS=\
+ 	$U/_cat\
++	$U/_cow1\
++	$U/_cowtest\
+ 	$U/_echo\
+ 	$U/_forktest\
+ 	$U/_grep\
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..9288fe1 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
+ void*           kalloc(void);
+ void            kfree(void *);
+ void            kinit(void);
++int             freemem(void);
+ 
+ // log.c
+ void            initlog(int, struct superblock*);
+@@ -106,6 +107,8 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int             sysinfo(void);
++int             copyinfo();
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+@@ -173,6 +176,8 @@ uint64          walkaddr(pagetable_t, uint64);
+ int             copyout(pagetable_t, uint64, char *, uint64);
+ int             copyin(pagetable_t, char *, uint64, uint64);
+ int             copyinstr(pagetable_t, char *, uint64, uint64);
++void            inc_refcnt(uint64);
++void            dec_refcnt(void*);
+ 
+ // plic.c
+ void            plicinit(void);
+diff --git a/kernel/kalloc.c b/kernel/kalloc.c
+index 0699e7e..4a6758b 100644
+--- a/kernel/kalloc.c
++++ b/kernel/kalloc.c
+@@ -80,3 +80,18 @@ kalloc(void)
+     memset((char*)r, 5, PGSIZE); // fill with junk
+   return (void*)r;
+ }
++
++int
++freemem(void)
++{
++  int n = 0;
++  struct run *r;
++  acquire(&kmem.lock);
++  
++  for (r = kmem.freelist; r; r = r->next)
++    ++n;
++
++  release(&kmem.lock);
++
++  return n;
++}
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 959b778..4e99948 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -6,6 +6,9 @@
+ #include "proc.h"
+ #include "defs.h"
+ 
++
++uint64 usernum=100; // for checking copyout
++
+ struct cpu cpus[NCPU];
+ 
+ struct proc proc[NPROC];
+@@ -681,3 +684,25 @@ procdump(void)
+     printf("\n");
+   }
+ }
++
++int 
++sysinfo()
++{
++
++   printf("sysinfo system call prints:\n");
++   printf("free memory:%d pages\n",freemem());
++   //printf("number of running process: %d \n\n",nproc());
++    return 1;
++}
++
++int 
++copyinfo()
++{
++ 
++ //struct proc *p;
++ uint64 unum;
++ argaddr(0,&unum);
++  return copyout(myproc()->pagetable,unum,(char*) &usernum,sizeof( usernum));
++  //return 1;
++
++}
+\ No newline at end of file
+diff --git a/kernel/riscv.h b/kernel/riscv.h
+index 20a01db..10380cc 100644
+--- a/kernel/riscv.h
++++ b/kernel/riscv.h
+@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
+ #define PTE_W (1L << 2)
+ #define PTE_X (1L << 3)
+ #define PTE_U (1L << 4) // user can access
++#define PTE_RSW (1L << 8) //to check cow pages
+ 
+ // shift a physical address to the right place for a PTE.
+ #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..5dbaccb 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_sysinfo(void);
++extern uint64 sys_copyinfo();
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_sysinfo] sys_sysinfo,
++[SYS_copyinfo] sys_copyinfo,
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..4f730bc 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,5 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_sysinfo 22
++#define SYS_copyinfo 23
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 1de184e..7e77960 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -89,3 +89,15 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++uint64
++sys_sysinfo(void)
++{
++  return sysinfo();
++}
++
++uint64
++sys_copyinfo(void)
++{
++  return copyinfo();
++}
+diff --git a/kernel/trap.c b/kernel/trap.c
+index 512c850..a1ebb2e 100644
+--- a/kernel/trap.c
++++ b/kernel/trap.c
+@@ -16,15 +16,13 @@ void kernelvec();
+ 
+ extern int devintr();
+ 
+-void
+-trapinit(void)
++void trapinit(void)
+ {
+   initlock(&tickslock, "time");
+ }
+ 
+ // set up to take exceptions and traps while in the kernel.
+-void
+-trapinithart(void)
++void trapinithart(void)
+ {
+   w_stvec((uint64)kernelvec);
+ }
+@@ -33,12 +31,11 @@ trapinithart(void)
+ // handle an interrupt, exception, or system call from user space.
+ // called from trampoline.S
+ //
+-void
+-usertrap(void)
++void usertrap(void)
+ {
+   int which_dev = 0;
+ 
+-  if((r_sstatus() & SSTATUS_SPP) != 0)
++  if ((r_sstatus() & SSTATUS_SPP) != 0)
+     panic("usertrap: not from user mode");
+ 
+   // send interrupts and exceptions to kerneltrap(),
+@@ -46,14 +43,15 @@ usertrap(void)
+   w_stvec((uint64)kernelvec);
+ 
+   struct proc *p = myproc();
+-  
++
+   // save user program counter.
+   p->trapframe->epc = r_sepc();
+-  
+-  if(r_scause() == 8){
++
++  if (r_scause() == 8)
++  {
+     // system call
+ 
+-    if(killed(p))
++    if (killed(p))
+       exit(-1);
+ 
+     // sepc points to the ecall instruction,
+@@ -65,19 +63,71 @@ usertrap(void)
+     intr_on();
+ 
+     syscall();
+-  } else if((which_dev = devintr()) != 0){
++  }
++  else if ((which_dev = devintr()) != 0)
++  {
+     // ok
+-  } else {
++  }
++  else if (r_scause() == 15)
++  {
++
++    uint64 va = PGROUNDDOWN(r_stval());
++    pte_t *pte;
++
++    if(va >= MAXVA || va == 0)
++      goto err;
++    if ((pte = walk(p->pagetable, va, 0)) == 0)
++      goto err;
++      //panic("in usertrap: pte should exist");
++    if ((*pte & PTE_V) == 0)
++      goto err;
++      //panic("usertrap: page doesn't exist");
++    uint flags = PTE_FLAGS(*pte);
++
++    if((*pte & PTE_W) )
++      goto err;
++
++    if ((*pte & PTE_RSW) && (*pte & PTE_U) && (*pte & PTE_R))
++    { // if copy on write
++      flags |= PTE_W;
++      flags &= (~PTE_RSW);
++      char *mem;
++      if ((mem = kalloc()) == 0)
++      {
++        //kfree(mem);
++        setkilled(p);
++      }
++      else
++      {
++        char *pa = (char *)PTE2PA(*pte);
++        memmove(mem, (char *)pa, PGSIZE);
++        //inc_refcnt((uint64)mem);
++        dec_refcnt(pa);
++        uvmunmap(p->pagetable, va, 1,0);
++        if (mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0)
++        {
++          //dec_refcnt(mem);
++          kfree(mem);
++          setkilled(p);
++        }
++      }
++    } else {
++      goto err;
++    }
++  }
++  else
++  {
++    err:
+     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+     setkilled(p);
+   }
+ 
+-  if(killed(p))
++  if (killed(p))
+     exit(-1);
+ 
+   // give up the CPU if this is a timer interrupt.
+-  if(which_dev == 2)
++  if (which_dev == 2)
+     yield();
+ 
+   usertrapret();
+@@ -86,8 +136,7 @@ usertrap(void)
+ //
+ // return to user space
+ //
+-void
+-usertrapret(void)
++void usertrapret(void)
+ {
+   struct proc *p = myproc();
+ 
+@@ -105,11 +154,11 @@ usertrapret(void)
+   p->trapframe->kernel_satp = r_satp();         // kernel page table
+   p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
+   p->trapframe->kernel_trap = (uint64)usertrap;
+-  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
++  p->trapframe->kernel_hartid = r_tp(); // hartid for cpuid()
+ 
+   // set up the registers that trampoline.S's sret will use
+   // to get to user space.
+-  
++
+   // set S Previous Privilege mode to User.
+   unsigned long x = r_sstatus();
+   x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
+@@ -122,7 +171,7 @@ usertrapret(void)
+   // tell trampoline.S the user page table to switch to.
+   uint64 satp = MAKE_SATP(p->pagetable);
+ 
+-  // jump to userret in trampoline.S at the top of memory, which 
++  // jump to userret in trampoline.S at the top of memory, which
+   // switches to the user page table, restores user registers,
+   // and switches to user mode with sret.
+   uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);
+@@ -131,27 +180,27 @@ usertrapret(void)
+ 
+ // interrupts and exceptions from kernel code go here via kernelvec,
+ // on whatever the current kernel stack is.
+-void 
+-kerneltrap()
++void kerneltrap()
+ {
+   int which_dev = 0;
+   uint64 sepc = r_sepc();
+   uint64 sstatus = r_sstatus();
+   uint64 scause = r_scause();
+-  
+-  if((sstatus & SSTATUS_SPP) == 0)
++
++  if ((sstatus & SSTATUS_SPP) == 0)
+     panic("kerneltrap: not from supervisor mode");
+-  if(intr_get() != 0)
++  if (intr_get() != 0)
+     panic("kerneltrap: interrupts enabled");
+ 
+-  if((which_dev = devintr()) == 0){
++  if ((which_dev = devintr()) == 0)
++  {
+     printf("scause %p\n", scause);
+     printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
+     panic("kerneltrap");
+   }
+ 
+   // give up the CPU if this is a timer interrupt.
+-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
++  if (which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+     yield();
+ 
+   // the yield() may have caused some traps to occur,
+@@ -160,8 +209,7 @@ kerneltrap()
+   w_sstatus(sstatus);
+ }
+ 
+-void
+-clockintr()
++void clockintr()
+ {
+   acquire(&tickslock);
+   ticks++;
+@@ -174,48 +222,57 @@ clockintr()
+ // returns 2 if timer interrupt,
+ // 1 if other device,
+ // 0 if not recognized.
+-int
+-devintr()
++int devintr()
+ {
+   uint64 scause = r_scause();
+ 
+-  if((scause & 0x8000000000000000L) &&
+-     (scause & 0xff) == 9){
++  if ((scause & 0x8000000000000000L) &&
++      (scause & 0xff) == 9)
++  {
+     // this is a supervisor external interrupt, via PLIC.
+ 
+     // irq indicates which device interrupted.
+     int irq = plic_claim();
+ 
+-    if(irq == UART0_IRQ){
++    if (irq == UART0_IRQ)
++    {
+       uartintr();
+-    } else if(irq == VIRTIO0_IRQ){
++    }
++    else if (irq == VIRTIO0_IRQ)
++    {
+       virtio_disk_intr();
+-    } else if(irq){
++    }
++    else if (irq)
++    {
+       printf("unexpected interrupt irq=%d\n", irq);
+     }
+ 
+     // the PLIC allows each device to raise at most one
+     // interrupt at a time; tell the PLIC the device is
+     // now allowed to interrupt again.
+-    if(irq)
++    if (irq)
+       plic_complete(irq);
+ 
+     return 1;
+-  } else if(scause == 0x8000000000000001L){
++  }
++  else if (scause == 0x8000000000000001L)
++  {
+     // software interrupt from a machine-mode timer interrupt,
+     // forwarded by timervec in kernelvec.S.
+ 
+-    if(cpuid() == 0){
++    if (cpuid() == 0)
++    {
+       clockintr();
+     }
+-    
++
+     // acknowledge the software interrupt by clearing
+     // the SSIP bit in sip.
+     w_sip(r_sip() & ~2);
+ 
+     return 2;
+-  } else {
++  }
++  else
++  {
+     return 0;
+   }
+ }
+-
+diff --git a/kernel/vm.c b/kernel/vm.c
+index 9f69783..8252d47 100644
+--- a/kernel/vm.c
++++ b/kernel/vm.c
+@@ -15,6 +15,50 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
+ 
+ extern char trampoline[]; // trampoline.S
+ 
++int reference_count[PHYSTOP / PGSIZE]={0}; // to keep count of the references made to a physical page
++
++void
++inc_refcnt(uint64 pa)
++{
++  if(pa >=PHYSTOP ){
++    panic("Physical address out of bound");
++    return; 
++  }
++  if(pa % PGSIZE){
++    panic("page not alligned");
++    return;
++  }
++  //printf("increaseing add %d\t with ref %d\n",pa/PGSIZE,reference_count[pa/PGSIZE]);
++  reference_count[pa / PGSIZE]++;
++
++}
++
++void
++dec_refcnt(void* pa)
++{
++ //pa=(char*) pa;
++  uint64 phyAdd=(uint64) pa;
++  //printf("decreasin\n\n");
++  if(phyAdd >= PHYSTOP){
++    panic("Physical address out of bound");
++    return;
++  }
++  if(phyAdd % PGSIZE){
++    panic("page not alligned");
++    return;
++  }
++  phyAdd /= PGSIZE;
++  //printf("decreaseing add %d\t with ref %d\n",phyAdd,reference_count[phyAdd]);
++  if(reference_count[phyAdd] == -1){
++    panic("trying to dereference unreferenced page");
++  }
++  reference_count[phyAdd]--;
++  if(reference_count[phyAdd] == -1){
++    reference_count[phyAdd] = 0;
++    kfree(pa);
++  }
++}
++
+ // Make a direct-map page table for the kernel.
+ pagetable_t
+ kvmmake(void)
+@@ -183,9 +227,11 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+       panic("uvmunmap: not mapped");
+     if(PTE_FLAGS(*pte) == PTE_V)
+       panic("uvmunmap: not a leaf");
++    char* pa =(char*) PTE2PA(*pte);
+     if(do_free){
+-      uint64 pa = PTE2PA(*pte);
+-      kfree((void*)pa);
++      //uint64 pa = PTE2PA(*pte);
++      //kfree((void*)pa);
++      dec_refcnt((void*)pa);
+     }
+     *pte = 0;
+   }
+@@ -306,24 +352,43 @@ int
+ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+ {
+   pte_t *pte;
+-  uint64 pa, i;
++  uint64  i;
+   uint flags;
+-  char *mem;
++ // char *mem;
+ 
+   for(i = 0; i < sz; i += PGSIZE){
+     if((pte = walk(old, i, 0)) == 0)
+       panic("uvmcopy: pte should exist");
+     if((*pte & PTE_V) == 0)
+       panic("uvmcopy: page not present");
+-    pa = PTE2PA(*pte);
++    char *pa =(char*) PTE2PA(*pte);
+     flags = PTE_FLAGS(*pte);
+-    if((mem = kalloc()) == 0)
++
++    // if((mem = kalloc()) == 0)
++    //   goto err;
++    // memmove(mem, (char*)pa, PGSIZE);
++    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
++    //   kfree(mem);
++    //   goto err;
++    // }
++
++    //printf("mane ekhane problem%d\n\n",reference_count[12]);
++
++    flags &= (~PTE_W);
++    flags |= PTE_RSW;
++
++    uvmunmap( old, i, 1, 0);
++    if(mappages(old, i, PGSIZE, (uint64)pa,flags) != 0){
++      //dec_refcnt(pa);
+       goto err;
+-    memmove(mem, (char*)pa, PGSIZE);
+-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+-      kfree(mem);
++    }
++
++    //inc_refcnt((uint64)pa);
++    inc_refcnt((uint64)pa);
++    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+       goto err;
+     }
++
+   }
+   return 0;
+ 
+@@ -353,20 +418,92 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+ {
+   uint64 n, va0, pa0;
+ 
+-  while(len > 0){
++  // while(len > 0){
++  //   va0 = PGROUNDDOWN(dstva);
++  //   pa0 = walkaddr(pagetable, va0);
++  //   if(pa0 == 0)
++  //     return -1;
++  //   n = PGSIZE - (dstva - va0);
++  //   if(n > len)
++  //     n = len;
++  //   memmove((void *)(pa0 + (dstva - va0)), src, n);
++
++  //   len -= n;
++  //   src += n;
++  //   dstva = va0 + PGSIZE;
++  // }
++
++  pte_t *pte;
++  uint flags;
++  while (len > 0)
++  {
+     va0 = PGROUNDDOWN(dstva);
+     pa0 = walkaddr(pagetable, va0);
+     if(pa0 == 0)
+       return -1;
+-    n = PGSIZE - (dstva - va0);
+-    if(n > len)
+-      n = len;
+-    memmove((void *)(pa0 + (dstva - va0)), src, n);
+ 
+-    len -= n;
+-    src += n;
+-    dstva = va0 + PGSIZE;
++    if ((pte = walk(pagetable, va0, 0)) == 0)
++      panic("uvmcopy in copyout: pte should exist");
++    if ((*pte & PTE_V) == 0)
++      panic("uvmcopyin copyout: page not present");
++    char *pa = (char *)PTE2PA(*pte);
++    flags = PTE_FLAGS(*pte);
++
++    if ((*pte & PTE_RSW))
++    { // if copy on write
++      flags |= PTE_W;
++      flags &= (~PTE_RSW);
++      char *mem;
++      if ((mem = kalloc()) == 0)
++      {
++        kfree(mem);
++        return -1;
++      }
++      else
++      {
++
++        memmove(mem, (char *)pa, PGSIZE);
++        // inc_refcnt((uint64)mem);
++        dec_refcnt(pa);
++        uvmunmap(pagetable, va0, 1, 0);
++        if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0)
++        {
++          // dec_refcnt(mem);
++          kfree(mem);
++          return -1;
++        }
++
++        pa0 = walkaddr(pagetable, va0);
++        if (pa0 == 0)
++          return -1;
++        n = PGSIZE - (dstva - va0);
++        if (n > len)
++          n = len;
++        memmove((void *)(pa0 + (dstva - va0)), src, n);
++        len -= n;
++        src += n;
++        dstva = va0 + PGSIZE;
++      }
++     } else {
++
++      pa0 = walkaddr(pagetable, va0);
++      if (pa0 == 0)
++        return -1;
++      n = PGSIZE - (dstva - va0);
++      if (n > len)
++        n = len;
++      memmove((void *)(pa0 + (dstva - va0)), src, n);
++
++      len -= n;
++      src += n;
++      dstva = va0 + PGSIZE;
++     }
++     // else if(!(*pte & PTE_W)){
++    //   printf("trying to write non-writable page\n");
++    //   return -1;
++    // }
+   }
++
+   return 0;
+ }
+ 
+diff --git a/user/cow1.c b/user/cow1.c
+new file mode 100644
+index 0000000..78c89b5
+--- /dev/null
++++ b/user/cow1.c
+@@ -0,0 +1,55 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "kernel/riscv.h"
++#include "user/user.h"
++
++int main(int argc, char *argv[])
++{
++    // printf("starting\n");
++    // sysinfo();
++    // printf("\n");
++
++    // char* add = sbrk(PGSIZE);
++    // printf("after allocating one page\n");
++    // sysinfo();
++    // printf("\n");
++
++    // int stat;
++    // int id = fork();
++    // if (id == 0)
++    // {
++    //     printf(" in child\n");
++    //     sysinfo();
++    //     printf("\n");
++       
++    //     *add='A';
++    //     *add='B';
++    //     printf("after  writing inchild \n");
++    //     sysinfo();
++    //     printf("\n");
++    // }
++    // else
++    // {
++    //     wait(&stat);
++    //     sysinfo();
++    //     printf("\n");
++
++    //     *add='A';
++
++    //     printf("after  writing in parent  \n", );
++    //     sysinfo();
++    //     printf("\n");
++    // }
++
++    uint64 unum;
++    copyinfo(&unum);
++    printf("%d\n",unum);
++
++    fork();
++    copyinfo(&unum);
++    printf("%d\n",unum);
++
++    
++
++    return 0;
++}
+diff --git a/user/cowtest.c b/user/cowtest.c
+new file mode 100644
+index 0000000..29b918f
+--- /dev/null
++++ b/user/cowtest.c
+@@ -0,0 +1,197 @@
++//
++// tests for copy-on-write fork() assignment.
++//
++
++#include "kernel/types.h"
++#include "kernel/memlayout.h"
++#include "user/user.h"
++
++// allocate more than half of physical memory,
++// then fork. this will fail in the default
++// kernel, which does not support copy-on-write.
++void
++simpletest()
++{
++  uint64 phys_size = PHYSTOP - KERNBASE;
++  int sz = (phys_size / 3) * 2;
++
++  printf("simple: ");
++  
++  char *p = sbrk(sz);
++  if(p == (char*)0xffffffffffffffffL){
++    printf("sbrk(%d) failed\n", sz);
++    exit(-1);
++  }
++
++  for(char *q = p; q < p + sz; q += 4096){
++    *(int*)q = getpid();
++  }
++
++  int pid = fork();
++  if(pid < 0){
++    printf("fork() failed\n");
++    exit(-1);
++  }
++
++  if(pid == 0)
++    exit(0);
++
++  wait(0);
++
++  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
++    printf("sbrk(-%d) failed\n", sz);
++    exit(-1);
++  }
++
++  printf("ok\n");
++}
++
++// three processes all write COW memory.
++// this causes more than half of physical memory
++// to be allocated, so it also checks whether
++// copied pages are freed.
++void
++threetest()
++{
++  uint64 phys_size = PHYSTOP - KERNBASE;
++  int sz = phys_size / 4;
++  int pid1, pid2;
++
++  printf("three: ");
++  
++  char *p = sbrk(sz);
++  if(p == (char*)0xffffffffffffffffL){
++    printf("sbrk(%d) failed\n", sz);
++    exit(-1);
++  }
++
++  pid1 = fork();
++  if(pid1 < 0){
++    printf("fork failed\n");
++    exit(-1);
++  }
++  if(pid1 == 0){
++    pid2 = fork();
++    if(pid2 < 0){
++      printf("fork failed");
++      exit(-1);
++    }
++    if(pid2 == 0){
++      for(char *q = p; q < p + (sz/5)*4; q += 4096){
++        *(int*)q = getpid();
++      }
++      for(char *q = p; q < p + (sz/5)*4; q += 4096){
++        if(*(int*)q != getpid()){
++          printf("wrong content\n");
++          exit(-1);
++        }
++      }
++      exit(-1);
++    }
++    for(char *q = p; q < p + (sz/2); q += 4096){
++      *(int*)q = 9999;
++    }
++    exit(0);
++  }
++
++  for(char *q = p; q < p + sz; q += 4096){
++    *(int*)q = getpid();
++  }
++
++  wait(0);
++
++  sleep(1);
++
++  for(char *q = p; q < p + sz; q += 4096){
++    if(*(int*)q != getpid()){
++      printf("wrong content\n");
++      exit(-1);
++    }
++  }
++
++  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
++    printf("sbrk(-%d) failed\n", sz);
++    exit(-1);
++  }
++
++  printf("ok\n");
++}
++
++char junk1[4096];
++int fds[2];
++char junk2[4096];
++char buf[4096];
++char junk3[4096];
++
++// test whether copyout() simulates COW faults.
++void
++filetest()
++{
++  printf("file: ");
++  
++  buf[0] = 99;
++
++  for(int i = 0; i < 4; i++){
++    if(pipe(fds) != 0){
++      printf("pipe() failed\n");
++      exit(-1);
++    }
++    int pid = fork();
++    if(pid < 0){
++      printf("fork failed\n");
++      exit(-1);
++    }
++    if(pid == 0){
++      sleep(1);
++      if(read(fds[0], buf, sizeof(i)) != sizeof(i)){
++        printf("error: read failed\n");
++        exit(1);
++      }
++      sleep(1);
++      int j = *(int*)buf;
++      if(j != i){
++        printf("error: read the wrong value\n");
++        exit(1);
++      }
++      exit(0);
++    }
++    if(write(fds[1], &i, sizeof(i)) != sizeof(i)){
++      printf("error: write failed\n");
++      exit(-1);
++    }
++  }
++
++  int xstatus = 0;
++  for(int i = 0; i < 4; i++) {
++    wait(&xstatus);
++    if(xstatus != 0) {
++      exit(1);
++    }
++  }
++
++  if(buf[0] != 99){
++    printf("error: child overwrote parent\n");
++    exit(1);
++  }
++
++  printf("ok\n");
++}
++
++int
++main(int argc, char *argv[])
++{
++  simpletest();
++
++  // check that the first simpletest() freed the physical memory.
++  simpletest();
++
++  threetest();
++  threetest();
++  threetest();
++
++  filetest();
++
++  printf("ALL COW TESTS PASSED\n");
++
++  exit(0);
++}
+diff --git a/user/user.h b/user/user.h
+index 4d398d5..08301cb 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -22,6 +22,8 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int sysinfo(void);
++int copyinfo(uint64*);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 01e426e..c434f34 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,5 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("sysinfo");
++entry("copyinfo");
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8201c74 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             freemem(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             sysinfo(void);
+int             copyinfo();
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +176,9 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            inc_refcnt(uint64);
+void            dec_refcnt(void*);
+void            initref(void);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..4a6758b 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,18 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int
+freemem(void)
+{
+  int n = 0;
+  struct run *r;
+  acquire(&kmem.lock);
+  
+  for (r = kmem.freelist; r; r = r->next)
+    ++n;
+
+  release(&kmem.lock);
+
+  return n;
+}
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..eb86027 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -30,6 +30,7 @@ main()
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
     __sync_synchronize();
+    initref();
     started = 1;
   } else {
     while(started == 0)
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..4e99948 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -6,6 +6,9 @@
 #include "proc.h"
 #include "defs.h"
 
+
+uint64 usernum=100; // for checking copyout
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -681,3 +684,25 @@ procdump(void)
     printf("\n");
   }
 }
+
+int 
+sysinfo()
+{
+
+   printf("sysinfo system call prints:\n");
+   printf("free memory:%d pages\n",freemem());
+   //printf("number of running process: %d \n\n",nproc());
+    return 1;
+}
+
+int 
+copyinfo()
+{
+ 
+ //struct proc *p;
+ uint64 unum;
+ argaddr(0,&unum);
+  return copyout(myproc()->pagetable,unum,(char*) &usernum,sizeof( usernum));
+  //return 1;
+
+}
\ No newline at end of file
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..10380cc 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_RSW (1L << 8) //to check cow pages
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..5dbaccb 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_sysinfo(void);
+extern uint64 sys_copyinfo();
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_sysinfo] sys_sysinfo,
+[SYS_copyinfo] sys_copyinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4f730bc 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_sysinfo 22
+#define SYS_copyinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..7e77960 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,15 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_sysinfo(void)
+{
+  return sysinfo();
+}
+
+uint64
+sys_copyinfo(void)
+{
+  return copyinfo();
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..a1ebb2e 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -16,15 +16,13 @@ void kernelvec();
 
 extern int devintr();
 
-void
-trapinit(void)
+void trapinit(void)
 {
   initlock(&tickslock, "time");
 }
 
 // set up to take exceptions and traps while in the kernel.
-void
-trapinithart(void)
+void trapinithart(void)
 {
   w_stvec((uint64)kernelvec);
 }
@@ -33,12 +31,11 @@ trapinithart(void)
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
 //
-void
-usertrap(void)
+void usertrap(void)
 {
   int which_dev = 0;
 
-  if((r_sstatus() & SSTATUS_SPP) != 0)
+  if ((r_sstatus() & SSTATUS_SPP) != 0)
     panic("usertrap: not from user mode");
 
   // send interrupts and exceptions to kerneltrap(),
@@ -46,14 +43,15 @@ usertrap(void)
   w_stvec((uint64)kernelvec);
 
   struct proc *p = myproc();
-  
+
   // save user program counter.
   p->trapframe->epc = r_sepc();
-  
-  if(r_scause() == 8){
+
+  if (r_scause() == 8)
+  {
     // system call
 
-    if(killed(p))
+    if (killed(p))
       exit(-1);
 
     // sepc points to the ecall instruction,
@@ -65,19 +63,71 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  }
+  else if ((which_dev = devintr()) != 0)
+  {
     // ok
-  } else {
+  }
+  else if (r_scause() == 15)
+  {
+
+    uint64 va = PGROUNDDOWN(r_stval());
+    pte_t *pte;
+
+    if(va >= MAXVA || va == 0)
+      goto err;
+    if ((pte = walk(p->pagetable, va, 0)) == 0)
+      goto err;
+      //panic("in usertrap: pte should exist");
+    if ((*pte & PTE_V) == 0)
+      goto err;
+      //panic("usertrap: page doesn't exist");
+    uint flags = PTE_FLAGS(*pte);
+
+    if((*pte & PTE_W) )
+      goto err;
+
+    if ((*pte & PTE_RSW) && (*pte & PTE_U) && (*pte & PTE_R))
+    { // if copy on write
+      flags |= PTE_W;
+      flags &= (~PTE_RSW);
+      char *mem;
+      if ((mem = kalloc()) == 0)
+      {
+        //kfree(mem);
+        setkilled(p);
+      }
+      else
+      {
+        char *pa = (char *)PTE2PA(*pte);
+        memmove(mem, (char *)pa, PGSIZE);
+        //inc_refcnt((uint64)mem);
+        dec_refcnt(pa);
+        uvmunmap(p->pagetable, va, 1,0);
+        if (mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0)
+        {
+          //dec_refcnt(mem);
+          kfree(mem);
+          setkilled(p);
+        }
+      }
+    } else {
+      goto err;
+    }
+  }
+  else
+  {
+    err:
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
   }
 
-  if(killed(p))
+  if (killed(p))
     exit(-1);
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2)
+  if (which_dev == 2)
     yield();
 
   usertrapret();
@@ -86,8 +136,7 @@ usertrap(void)
 //
 // return to user space
 //
-void
-usertrapret(void)
+void usertrapret(void)
 {
   struct proc *p = myproc();
 
@@ -105,11 +154,11 @@ usertrapret(void)
   p->trapframe->kernel_satp = r_satp();         // kernel page table
   p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
   p->trapframe->kernel_trap = (uint64)usertrap;
-  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
+  p->trapframe->kernel_hartid = r_tp(); // hartid for cpuid()
 
   // set up the registers that trampoline.S's sret will use
   // to get to user space.
-  
+
   // set S Previous Privilege mode to User.
   unsigned long x = r_sstatus();
   x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
@@ -122,7 +171,7 @@ usertrapret(void)
   // tell trampoline.S the user page table to switch to.
   uint64 satp = MAKE_SATP(p->pagetable);
 
-  // jump to userret in trampoline.S at the top of memory, which 
+  // jump to userret in trampoline.S at the top of memory, which
   // switches to the user page table, restores user registers,
   // and switches to user mode with sret.
   uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);
@@ -131,27 +180,27 @@ usertrapret(void)
 
 // interrupts and exceptions from kernel code go here via kernelvec,
 // on whatever the current kernel stack is.
-void 
-kerneltrap()
+void kerneltrap()
 {
   int which_dev = 0;
   uint64 sepc = r_sepc();
   uint64 sstatus = r_sstatus();
   uint64 scause = r_scause();
-  
-  if((sstatus & SSTATUS_SPP) == 0)
+
+  if ((sstatus & SSTATUS_SPP) == 0)
     panic("kerneltrap: not from supervisor mode");
-  if(intr_get() != 0)
+  if (intr_get() != 0)
     panic("kerneltrap: interrupts enabled");
 
-  if((which_dev = devintr()) == 0){
+  if ((which_dev = devintr()) == 0)
+  {
     printf("scause %p\n", scause);
     printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
     panic("kerneltrap");
   }
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+  if (which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
     yield();
 
   // the yield() may have caused some traps to occur,
@@ -160,8 +209,7 @@ kerneltrap()
   w_sstatus(sstatus);
 }
 
-void
-clockintr()
+void clockintr()
 {
   acquire(&tickslock);
   ticks++;
@@ -174,48 +222,57 @@ clockintr()
 // returns 2 if timer interrupt,
 // 1 if other device,
 // 0 if not recognized.
-int
-devintr()
+int devintr()
 {
   uint64 scause = r_scause();
 
-  if((scause & 0x8000000000000000L) &&
-     (scause & 0xff) == 9){
+  if ((scause & 0x8000000000000000L) &&
+      (scause & 0xff) == 9)
+  {
     // this is a supervisor external interrupt, via PLIC.
 
     // irq indicates which device interrupted.
     int irq = plic_claim();
 
-    if(irq == UART0_IRQ){
+    if (irq == UART0_IRQ)
+    {
       uartintr();
-    } else if(irq == VIRTIO0_IRQ){
+    }
+    else if (irq == VIRTIO0_IRQ)
+    {
       virtio_disk_intr();
-    } else if(irq){
+    }
+    else if (irq)
+    {
       printf("unexpected interrupt irq=%d\n", irq);
     }
 
     // the PLIC allows each device to raise at most one
     // interrupt at a time; tell the PLIC the device is
     // now allowed to interrupt again.
-    if(irq)
+    if (irq)
       plic_complete(irq);
 
     return 1;
-  } else if(scause == 0x8000000000000001L){
+  }
+  else if (scause == 0x8000000000000001L)
+  {
     // software interrupt from a machine-mode timer interrupt,
     // forwarded by timervec in kernelvec.S.
 
-    if(cpuid() == 0){
+    if (cpuid() == 0)
+    {
       clockintr();
     }
-    
+
     // acknowledge the software interrupt by clearing
     // the SSIP bit in sip.
     w_sip(r_sip() & ~2);
 
     return 2;
-  } else {
+  }
+  else
+  {
     return 0;
   }
 }
-
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..d247279 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,7 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
 
 /*
  * the kernel's page table.
@@ -15,6 +16,67 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+int reference_count[PHYSTOP / PGSIZE]; // to keep count of the references made to a physical page
+struct spinlock reflock;
+
+
+void 
+initref()
+{
+   for(int i=0;i< PHYSTOP/PGSIZE;i++) reference_count[i]=0;
+   initlock(&reflock, "reflock");
+}
+
+void
+inc_refcnt(uint64 pa)
+{
+  if(pa >=PHYSTOP ){
+    panic("Physical address out of bound");
+    return; 
+  }
+  if(pa % PGSIZE){
+    panic("page not alligned");
+    return;
+  }
+  //printf("increaseing add %d\t with ref %d\n",pa/PGSIZE,reference_count[pa/PGSIZE]);
+  acquire(&reflock);
+  reference_count[pa / PGSIZE]++;
+  release(&reflock);
+
+}
+
+void
+dec_refcnt(void* pa)
+{
+ //pa=(char*) pa;
+  uint64 phyAdd=(uint64) pa;
+  //printf("decreasin\n\n");
+  if(phyAdd >= PHYSTOP){
+    panic("Physical address out of bound");
+    return;
+  }
+  if(phyAdd % PGSIZE){
+    panic("page not alligned");
+    return;
+  }
+  phyAdd /= PGSIZE;
+  //printf("decreaseing add %d\t with ref %d\n",phyAdd,reference_count[phyAdd]);
+   acquire(&reflock);
+  if(reference_count[phyAdd] == -1){
+    release(&reflock);
+    panic("trying to dereference unreferenced page");
+    acquire(&reflock);
+  }
+  reference_count[phyAdd]--;
+  if(reference_count[phyAdd] == -1){
+    reference_count[phyAdd] = 0;
+   release(&reflock);
+    kfree(pa);
+     acquire(&reflock);
+  }
+  release(&reflock);
+}
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -183,9 +245,11 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
+    char* pa =(char*) PTE2PA(*pte);
     if(do_free){
-      uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+      //uint64 pa = PTE2PA(*pte);
+      //kfree((void*)pa);
+      dec_refcnt((void*)pa);
     }
     *pte = 0;
   }
@@ -306,24 +370,43 @@ int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
   pte_t *pte;
-  uint64 pa, i;
+  uint64  i;
   uint flags;
-  char *mem;
+ // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
+    char *pa =(char*) PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    //   kfree(mem);
+    //   goto err;
+    // }
+
+    //printf("mane ekhane problem%d\n\n",reference_count[12]);
+
+    flags &= (~PTE_W);
+    flags |= PTE_RSW;
+
+    uvmunmap( old, i, 1, 0);
+    if(mappages(old, i, PGSIZE, (uint64)pa,flags) != 0){
+      //dec_refcnt(pa);
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    }
+
+    //inc_refcnt((uint64)pa);
+    inc_refcnt((uint64)pa);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
       goto err;
     }
+
   }
   return 0;
 
@@ -353,20 +436,92 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
 
-  while(len > 0){
+  // while(len > 0){
+  //   va0 = PGROUNDDOWN(dstva);
+  //   pa0 = walkaddr(pagetable, va0);
+  //   if(pa0 == 0)
+  //     return -1;
+  //   n = PGSIZE - (dstva - va0);
+  //   if(n > len)
+  //     n = len;
+  //   memmove((void *)(pa0 + (dstva - va0)), src, n);
+
+  //   len -= n;
+  //   src += n;
+  //   dstva = va0 + PGSIZE;
+  // }
+
+  pte_t *pte;
+  uint flags;
+  while (len > 0)
+  {
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
-    n = PGSIZE - (dstva - va0);
-    if(n > len)
-      n = len;
-    memmove((void *)(pa0 + (dstva - va0)), src, n);
 
-    len -= n;
-    src += n;
-    dstva = va0 + PGSIZE;
+    if ((pte = walk(pagetable, va0, 0)) == 0)
+      panic("uvmcopy in copyout: pte should exist");
+    if ((*pte & PTE_V) == 0)
+      panic("uvmcopyin copyout: page not present");
+    char *pa = (char *)PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+
+    if ((*pte & PTE_RSW))
+    { // if copy on write
+      flags |= PTE_W;
+      flags &= (~PTE_RSW);
+      char *mem;
+      if ((mem = kalloc()) == 0)
+      {
+        kfree(mem);
+        return -1;
+      }
+      else
+      {
+
+        memmove(mem, (char *)pa, PGSIZE);
+        // inc_refcnt((uint64)mem);
+        dec_refcnt(pa);
+        uvmunmap(pagetable, va0, 1, 0);
+        if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0)
+        {
+          // dec_refcnt(mem);
+          kfree(mem);
+          return -1;
+        }
+
+        pa0 = walkaddr(pagetable, va0);
+        if (pa0 == 0)
+          return -1;
+        n = PGSIZE - (dstva - va0);
+        if (n > len)
+          n = len;
+        memmove((void *)(pa0 + (dstva - va0)), src, n);
+        len -= n;
+        src += n;
+        dstva = va0 + PGSIZE;
+      }
+     } else {
+
+      pa0 = walkaddr(pagetable, va0);
+      if (pa0 == 0)
+        return -1;
+      n = PGSIZE - (dstva - va0);
+      if (n > len)
+        n = len;
+      memmove((void *)(pa0 + (dstva - va0)), src, n);
+
+      len -= n;
+      src += n;
+      dstva = va0 + PGSIZE;
+     }
+     // else if(!(*pte & PTE_W)){
+    //   printf("trying to write non-writable page\n");
+    //   return -1;
+    // }
   }
+
   return 0;
 }
 
diff --git a/user/cow1.c b/user/cow1.c
new file mode 100644
index 0000000..ef6a2ee
--- /dev/null
+++ b/user/cow1.c
@@ -0,0 +1,55 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+    printf("starting\n");
+    sysinfo();
+    printf("\n");
+
+    char* add = sbrk(PGSIZE);
+    printf("after allocating one page\n");
+    sysinfo();
+    printf("\n");
+
+    int stat;
+    int id = fork();
+    if (id == 0)
+    {
+        printf(" in child\n");
+        sysinfo();
+        printf("\n");
+       
+        *add='A';
+        *add='B';
+        printf("after  writing inchild \n");
+        sysinfo();
+        printf("\n");
+    }
+    else
+    {
+        wait(&stat);
+        sysinfo();
+        printf("\n");
+
+        *add='A';
+
+        printf("after  writing in parent  \n" );
+        sysinfo();
+        printf("\n");
+    }
+
+    // uint64 unum;
+    // copyinfo(&unum);
+    // printf("%d\n",unum);
+
+    // fork();
+    // copyinfo(&unum);
+    // printf("%d\n",unum);
+
+    
+
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..08301cb 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int sysinfo(void);
+int copyinfo(uint64*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..c434f34 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("sysinfo");
+entry("copyinfo");
